#!/bin/bash
# TODO
# - prompt postinstall steps

#
# CONFIG
DIR_DOTFILES=$HOME/.dotfiles
GIT_DOTFILES=https://github.com/eremt/dotfiles

#
# PRE INSTALL
OS="default"
get_os () {
  uname_out=$(uname -a)

  # differences in package repositories are best handled with $PACKAGE_MANAGER
  # $OS is only used when $PACKAGE_MANAGER isn't enough like firefox-esr for debian
  if [[ $uname_out == *"Debian"* ]]; then
    OS="debian"
  fi
}
get_os

PACKAGE_MANAGER=""
cmd_package_manager=""
get_package_manager () {
  if command -v apt &> /dev/null; then
    PACKAGE_MANAGER="apt"
    cmd_package_manager="$PACKAGE_MANAGER install"
  elif command -v pacman &> /dev/null; then
    PACKAGE_MANAGER="pacman"
    cmd_package_manager="$PACKAGE_MANAGER -S"
  else
    echo "Couldn't get package manager, aborting."
    exit 1
  fi
}
get_package_manager

cmd_install_packages () {
  eval sudo "$cmd_package_manager $*"
}
PACKAGES_SELECTED=()
prompt_install_packages () {
  for p in "$@"; do
    if prompt_Yn "Install $p?"; then
      PACKAGES_SELECTED+=("$p")
    fi
  done
}

prompt_Yn () {
  read -rp "$* [Y/n]" yn
  if [[ $yn =~ ^(yes|y|)$ ]]; then
    return 0
  else
    return 1
  fi
}
prompt_yN () {
  read -rp "$* [y/N]" yn
  if [[ $yn =~ ^(yes|y)$ ]]; then
    return 0
  else
    return 1
  fi
}

#
# PACKAGES
PACKAGES_DEP=("git")

PACKAGES_CORE=("zsh" "wget" "curl" "fzf")
LIBNOTIFY="libnotify"
if [ "$OS" = "debian" ]; then
  LIBNOTIFY="libnotify-bin"
fi
PACKAGES_DESKTOP=("sxhkd" "alacritty" "$LIBNOTIFY" "dunst" "inotify-tools" "rofi" "redshift")
PACKAGES_EDITORS=("vim" "neovim")
PACKAGES_EMAIL_RSS=("neomutt" "newsboat" "urlview")

FIREFOX="firefox"
if [ "$OS" = "debian" ]; then
  # Debian repositories only has firefox-esr
  FIREFOX="firefox-esr"
fi
PACKAGES_WWW=("$FIREFOX" "chromium")

PACKAGES_FONTS=()
if [ "$PACKAGE_MANAGER" = "apt" ]; then
  PACKAGES_FONTS=("fonts-font-awesome" "fonts-ubuntu")
elif [ "$PACKAGE_MANAGER" = "pacman" ]; then
  PACKAGES_FONTS=("ttf-font-awesome" "ttf-ubuntu-font-family")
fi

#
# INSTALL
#
# 1 - Install dependencies
prompt_Yn "Install dependencies (${PACKAGES_DEP[*]})?" && cmd_install_packages "${PACKAGES_DEP[@]}"
#
# 2 - Clone and checkout $GIT_DOTFILES
if prompt_Yn "Clone $GIT_DOTFILES?"; then
  git clone --bare "$GIT_DOTFILES" "$DIR_DOTFILES"
  git --git-dir="$DIR_DOTFILES" --work-tree="$HOME" config --local status.showUntrackedFiles no
  if prompt_Yn "Checkout $GIT_DOTFILES, this will overwrite some files?"; then
    git --git-dir="$DIR_DOTFILES" --work-tree="$HOME" checkout -f
  fi
fi
#
# 3 - Prompt install for rest of packages
prompt_Yn "Select core packages?" && prompt_install_packages "${PACKAGES_CORE[@]}"
prompt_Yn "Select desktop packages?" && prompt_install_packages "${PACKAGES_DESKTOP[@]}"
prompt_Yn "Select editor(s)?" && prompt_install_packages "${PACKAGES_EDITORS[@]}"
prompt_Yn "Select e-mail and RSS tools?" && prompt_install_packages "${PACKAGES_EMAIL_RSS[@]}"
prompt_Yn "Select browser(s)?" && prompt_install_packages "${PACKAGES_WWW[@]}"
prompt_Yn "Install fonts?" && PACKAGES_SELECTED+=("${PACKAGES_FONTS[@]}")
#
# 4 - Prompt confirmation and install selected
echo -e "\nSelected packages:"
for package in "${PACKAGES_SELECTED[@]}"; do
  echo " - $package"
done

echo -e "\n$ $cmd_package_manager ${PACKAGES_SELECTED[*]}\n"
prompt_yN "Run install?" && cmd_install_packages "${PACKAGES_SELECTED[*]}" || echo "Skip install."
#
# POST INSTALL
# - clone packages_editor plugins and themes
# - setup packages_www policies.json

# Vim/Neovim
plugins_vim=(
  "https://github.com/junegunn/fzf"
  "https://github.com/junegunn/fzf.vim"
  "https://github.com/mattn/emmet-vim"
)
themes_vim=(
  "https://github.com/eremt/vinimal"
)
plugins_nvim=(
  "${plugins_vim[@]}"
  "https://github.com/neovim/nvim-lspconfig"
)
DIR_ROOT_VIM=$HOME/.vim/pack
DIR_ROOT_NVIM=$HOME/.config/nvim/pack
DIR_THEMES_VIM=themes/start
DIR_PLUGINS_VIM=plugins/start
postinstall_vi () {
  # Vim
  if command -v vim &> /dev/null; then
    mkdir -p "$DIR_ROOT_VIM/$DIR_PLUGINS_VIM" "$DIR_ROOT_VIM/$DIR_THEMES_VIM"
    for plugin in "${plugins_vim[@]}"; do
      name=$(basename "$plugin")
      git clone "$plugin" "$DIR_ROOT_VIM/$DIR_PLUGINS_VIM/$name"
    done
    for theme in "${themes_vim[@]}"; do
      name=$(basename "$theme")
      git clone "$theme" "$DIR_ROOT_VIM/$DIR_THEMES_VIM/$name"
    done
  fi

  # Neovim
  if command -v nvim &> /dev/null; then
    mkdir -p "$DIR_ROOT_NVIM/$DIR_PLUGINS_VIM" "$DIR_ROOT_NVIM/$DIR_THEMES_VIM"
    for plugin in "${plugins_nvim[@]}"; do
      name=$(basename "$plugin")
      git clone "$plugin" "$DIR_ROOT_NVIM/$DIR_PLUGINS_VIM/$name"
    done
    for theme in "${themes_vim[@]}"; do
      name=$(basename "$theme")
      git clone "$theme" "$DIR_ROOT_NVIM/$DIR_THEMES_VIM/$name"
    done
  fi
}
postinstall_vi

# Firefox/Chromium
DIR_ROOT_FIREFOX=/etc/firefox/policies
DIR_ROOT_CHROMIUM=/etc/chromium/policies/managed
postinstall_www () {
  if command -v firefox &> /dev/null; then
    sudo mkdir -p "$DIR_ROOT_FIREFOX"
    sudo cp "$HOME/.config/mozilla/policies.json" "$DIR_ROOT_FIREFOX/policies.json"
  fi
  if command -v chromium &> /dev/null; then
    sudo mkdir -p "$DIR_ROOT_CHROMIUM"
    sudo cp "$HOME/.config/chromium/policies.json" "$DIR_ROOT_CHROMIUM/policies.json"
  fi
}
postinstall_www
