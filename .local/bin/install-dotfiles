#!/bin/bash
#
# install-dotfiles
# this script installs my dotfiles and packages
#
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
DIR_DOTFILES=$XDG_CONFIG_HOME/.dotfiles
GIT_DOTFILES='https://github.com/eremt/dotfiles'

###################################
# Utils
###################################

prompt_Yn () {
  read -rp "$* [Y/n]" yn
  if [[ $yn =~ ^(yes|y|)$ ]]; then
    return 0
  else
    return 1
  fi
}
prompt_yN () {
  read -rp "$* [y/N]" yn
  if [[ $yn =~ ^(yes|y)$ ]]; then
    return 0
  else
    return 1
  fi
}
list_packages () {
  local packages=$*
  for p in $packages; do
    echo "  $p"
  done
}
print_section () {
  echo -e "\n--- $* ---\n"
}
add_packages () {
  local packages=$*
  for p in $packages; do
    packages_selected+=("$p")
  done
}
prompt_install_package () {
  local package=$1
  if prompt_Yn "  $package?"; then
    packages_selected+=("$package")
  fi
}
prompt_install_packages () {
  local packages=$*
  echo "Packages:"
  list_packages "$packages"
  echo
  echo "0) All packages"
  echo "1) Skip packages"
  echo "2) Custom selection"
  echo

  read -rp "Select an option (default=0):" answer
  case $answer in
    # default, add all packages
    0|'') add_packages "${packages[@]}";;
    1) echo "Skipping packages.";;
    2)
      echo "Select:"
      for p in $packages; do
        prompt_install_package "$p"
      done
    ;;
  esac
}
# Clone a list of repositories to a destination directory
# usage: clone_repositories [destination] [repositores...]
clone_repositories () {
  local destination=$1
  shift
  local repositories=$*
  for repo in $repositories; do
    name=$(basename "$repo")
    git clone "$repo" "$destination/$name"
  done
}

###################################
# Init
###################################

os_uname=$(uname -a)
# not all distributions are covered
# unless absolutely necessary use $package_manager
distribution=''
if [[ $os_uname =~ "Debian" ]]; then
  distribution='debian'
  if prompt_Yn "Distribution is Debian, would you like to enable testing?"; then
    sudo sed -i s/bullseye/testing/g /etc/apt/sources.list
  fi
fi

package_manager=''
cmd_package_manager=''
if command -v apt &> /dev/null; then
  package_manager='apt'
  cmd_package_manager='sudo apt install'
  sudo apt update && sudo apt upgrade
elif command -v pacman &> /dev/null; then
  package_manager='pacman'
  cmd_package_manager='sudo pacman -S'
  sudo pacman -Syu # update system
fi

###################################
# Packages
###################################

# Some packages are named differently in some repositories
LIBNOTIFY='libnotify'
if [ $package_manager == 'apt' ]; then
  LIBNOTIFY='libnotify-bin'
fi
FIREFOX='firefox'
if [ "$distribution" == 'debian' ]; then
  FIREFOX='firefox-esr'
fi

packages_selected=()
packages_core=(
  'wget'
  'curl'
  'fzf'
)
packages_editors=(
  'vim'
  'neovim'
)
packages_desktop=(
  'alacritty'
  'sxhkd'
  'xdotool'
  "$LIBNOTIFY"
  "inotify-tools"
  'dunst'
  'rofi'
  'redshift'
)
packages_www=(
  "$FIREFOX"
  'chromium'
  'lynx'
)
packages_email=(
  'neomutt'
  'msmtp'
  'msmtp-mta'
  'isync'
)
packages_fonts=()
if [ $package_manager == 'apt' ]; then
  packages_fonts=('fonts-noto' 'fonts-font-awesome')
elif [ $package_manager == 'pacman' ]; then
  packages_fonts=('noto-fonts' 'ttf-font-awesome')
fi

themes_vim=(
  "https://github.com/eremt/vinimal"
)
plugins_vim=(
  "https://github.com/junegunn/fzf.vim"
  "https://github.com/mattn/emmet-vim"
)
plugins_nvim=(
  "${plugins_vim[@]}"
  "https://github.com/neovim/nvim-lspconfig"
)

###################################
# Packages post install
###################################

postinstall_editors () {
  # Install vim/nvim themes and plugins
  local dest_vim="$HOME/.vim/pack"
  if command -v vim &> /dev/null; then
    mkdir -pv "$dest_vim/"{themes,plugins}"/start"
    clone_repositories "$dest_vim/themes/start" "${themes_vim[@]}"
    clone_repositories "$dest_vim/plugins/start" "${plugins_vim[@]}"
  fi
  local dest_nvim="$XDG_CONFIG_HOME/nvim/pack"
  if command -v nvim &> /dev/null; then
    mkdir -pv "$dest_nvim/"{themes,plugins}"/start"
    clone_repositories "$dest_nvim/themes/start" "${themes_vim[@]}"
    clone_repositories "$dest_nvim/plugins/start" "${plugins_nvim[@]}"
  fi
}
postinstall_www () {
  # Install addons and hardened settings
  local dest_firefox=/etc/firefox/policies
  if command -v firefox &> /dev/null; then
    sudo mkdir -pv "$dest_firefox"
    sudo cp "$XDG_CONFIG_HOME/mozilla/policies.json" "$dest_firefox/policies.json"
  fi
  local dest_chromium=/etc/chromium/policies/managed
  if command -v chromium &> /dev/null; then
    sudo mkdir -pv "$dest_chromium"
    sudo cp "$XDG_CONFIG_HOME/chromium/policies.json" "$dest_chromium/policies.json"
  fi
}

###################################
# Main
###################################

main () {
  # install dependency git if it isn't already installed
  if ! command -v git &> /dev/null; then
    if prompt_Yn "This script requires git, would you like to install it?"; then
      $cmd_package_manager git
    else
      echo "Dependency git not installed, exit"
      exit 1
    fi
  fi

  cmd_git_dotfiles="git --git-dir=$DIR_DOTFILES --work-tree=$HOME"
  if prompt_yN "Clone $GIT_DOTFILES?"; then
    mkdir -pv "$XDG_CONFIG_HOME"
    git clone --bare "$GIT_DOTFILES" "$DIR_DOTFILES"
    if ! $cmd_git_dotfiles checkout; then
      # TODO: git list conflicts, and back them up
      if prompt_yN "Conflicting files, would you like to overwrite them?"; then
        $cmd_git_dotfiles checkout -f
      fi
    fi
  fi

  # prompt for packages to install
  print_section 'Core packages'
  prompt_install_packages "${packages_core[@]}"

  print_section 'Editors'
  prompt_install_packages "${packages_editors[@]}"

  print_section 'Desktop packages'
  prompt_install_packages "${packages_desktop[@]}"

  print_section 'Browsers'
  prompt_install_packages "${packages_www[@]}"

  print_section 'E-mail'
  prompt_install_packages "${packages_email[@]}"

  print_section 'Fonts'
  prompt_install_packages "${packages_fonts[@]}"

  count_packages=${#packages_selected[@]}
  if [ "$count_packages" -gt 0 ]; then
    echo -e "\nSelected $count_packages packages:"
    list_packages "${packages_selected[@]}"
    echo
    if prompt_yN "Confirm installation?"; then
      $cmd_package_manager "${packages_selected[@]}"
    fi
  else
    echo -e '\nNo packages selected.'
  fi

  # post install selected
  postinstall_editors
  postinstall_www
}
main
